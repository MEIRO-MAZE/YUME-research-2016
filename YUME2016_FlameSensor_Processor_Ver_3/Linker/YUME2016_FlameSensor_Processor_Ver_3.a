;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : YUME Digital Flame Sensor Ver 3
;Version : Ver.1.0
;Date    : May 28th 2016
;Author  : Intelligent Fire Fighting Robot Division
;Company : University of Brawijaya
;Comments:
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <stdlib.h>
;#include <delay.h>
;#include <math.h>
;#include <sleep.h>
;//#include <conio.h>
;
;//char x=0;
;int baud_mode;
;
;//UART SPEED CONFIG VARIABLES
;const int DEBUG_MODE = 2;

	.DSEG
;const int ROBOT_MODE = 1;
;void UART_Speed_Config(int mode);
;
;
;void YUME_Initialization(void);
;void Send_UART(unsigned char data);
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 005D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 005E char status,data;
; 0000 005F status=UCSRA;
;PCODE: $0000000F VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0060 data=UDR;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0061 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0062    {
; 0000 0063    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0064 #if RX_BUFFER_SIZE == 256
; 0000 0065    // special case for receiver buffer size=256
; 0000 0066    if (++rx_counter == 0)
; 0000 0067       {
; 0000 0068 #else
; 0000 0069    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 006A    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 006B       {
; 0000 006C       rx_counter=0;
;PCODE: $00000025 VOL: 0
; 0000 006D #endif
; 0000 006E       rx_buffer_overflow=1;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 006F       }
; 0000 0070    }
;PCODE: $00000029 VOL: 0
; 0000 0071 }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0078 {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0079 char data;
; 0000 007A while (rx_counter==0);
;PCODE: $00000031 VOL: 0
;	data -> R17
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 007B data=rx_buffer[rx_rd_index++];
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 007C #if RX_BUFFER_SIZE != 256
; 0000 007D if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 007E #endif
; 0000 007F #asm("cli")
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
	cli
;PCODE: $00000042 VOL: 0
; 0000 0080 --rx_counter;
;PCODE: $00000043 VOL: 0
; 0000 0081 #asm("sei")
;PCODE: $00000044 VOL: 0
	sei
;PCODE: $00000045 VOL: 0
; 0000 0082 return data;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0083 }
;PCODE: $00000049 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;#define ADC_VREF_TYPE 0x60
;
;// Read the 8 most significant bits
;// of the AD conversion result
;unsigned char read_adc(unsigned char adc_input)
; 0000 008F {
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0090 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0091 // Delay needed for the stabilization of the ADC input voltage
; 0000 0092 delay_us(10);
;PCODE: $0000004F VOL: 0
; 0000 0093 // Start the AD conversion
; 0000 0094 ADCSRA|=0x40;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0095 // Wait for the AD conversion to complete
; 0000 0096 while ((ADCSRA & 0x10)==0);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0097 ADCSRA|=0x10;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0098 return ADCH;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0099 }
;PCODE: $0000005D VOL: 0
;
;// Declare your global variables here
;unsigned int FLAME_ANALOG[8]={0,0,0,0,0,0,0,0};
;//unsigned int FLAME_LOGIC[8]={0,0,0,0,0,0,0,0};
;unsigned int FRONT_ANALOG;
;
;
;int FLAME_SENSOR=0;
;
;//FLAG VARIABLES
;unsigned int COMMAND_FLAG_A = 0x3C;

	.DSEG
;unsigned int COMMAND_FLAG_B = 0x3E;
;const unsigned int COMMAND_COMPLETED = 0x7C;
;
;unsigned int MAX_VAL;
;//MACRO
;int NO_FLAME            = 0;
;
;int FLAME_LEFT          = 1;
;int FLAME_ASKEW_LEFT_2  = 2;
;int FLAME_ASKEW_LEFT_1  = 3;
;int FLAME_FRONT         = 4;
;int FLAME_ASKEW_RIGHT_1 = 5;
;int FLAME_ASKEW_RIGHT_2 = 6;
;int FLAME_RIGHT         = 7;
;
;//         PC3
;//      PC4   PC2
;//   PC5         PC1
;//PC6               PC0
;
;void main(void)
; 0000 00BA {

	.CSEG
;PCODE: $0000005E VOL: 0
; 0000 00BB     // Declare your local variables here
; 0000 00BC     YUME_Initialization();
;PCODE: $0000005F VOL: 0
; 0000 00BD     UART_Speed_Config(DEBUG_MODE);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 00BE 
; 0000 00BF 
; 0000 00C0     while (1)
;PCODE: $00000063 VOL: 0
; 0000 00C1       {
; 0000 00C2             FLAME_ANALOG[0]=read_adc(0);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 00C3             FLAME_ANALOG[1]=read_adc(1);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 00C4             FLAME_ANALOG[2]=read_adc(2);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00C5             FLAME_ANALOG[3]=read_adc(3);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00C6             FLAME_ANALOG[4]=read_adc(4);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00C7             FLAME_ANALOG[5]=read_adc(5);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00C8             FLAME_ANALOG[6]=read_adc(6);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00C9 
; 0000 00CA             FRONT_ANALOG=FLAME_ANALOG[3];
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00CB 
; 0000 00CC             MAX_VAL= max(FLAME_ANALOG[0],FLAME_ANALOG[1]);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00CD             MAX_VAL= max(MAX_VAL,FLAME_ANALOG[2]);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00CE             MAX_VAL= max(MAX_VAL,FLAME_ANALOG[3]);
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00CF             MAX_VAL= max(MAX_VAL,FLAME_ANALOG[4]);
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00D0             MAX_VAL= max(MAX_VAL,FLAME_ANALOG[5]);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00D1             MAX_VAL= max(MAX_VAL,FLAME_ANALOG[6]);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00D2 
; 0000 00D3 //            if(MAX_VAL>=100)
; 0000 00D4 //            {
; 0000 00D5 //                if(MAX_VAL==FLAME_ANALOG[3])
; 0000 00D6 //                {
; 0000 00D7 //                    printf("MIDDLE : %d \r",FLAME_ANALOG[3]);
; 0000 00D8 //                }
; 0000 00D9 //                else if(MAX_VAL==FLAME_ANALOG[4])
; 0000 00DA //                {
; 0000 00DB //                    printf("ASKEW LEFT 1: %d \r",FLAME_ANALOG[4]);
; 0000 00DC //                }
; 0000 00DD //                else if(MAX_VAL==FLAME_ANALOG[2])
; 0000 00DE //                {
; 0000 00DF //                    printf("ASKEW RIGHT 1: %d \r",FLAME_ANALOG[2]);
; 0000 00E0 //                }
; 0000 00E1 //                else if(MAX_VAL==FLAME_ANALOG[5])
; 0000 00E2 //                {
; 0000 00E3 //                    printf("ASKEW LEFT 2: %d \r",FLAME_ANALOG[5]);
; 0000 00E4 //                }
; 0000 00E5 //                else if(MAX_VAL==FLAME_ANALOG[1])
; 0000 00E6 //                {
; 0000 00E7 //                    printf("ASKEW RIGHT 2: %d \r",FLAME_ANALOG[1]);
; 0000 00E8 //                }
; 0000 00E9 //                else if(MAX_VAL==FLAME_ANALOG[6])
; 0000 00EA //                {
; 0000 00EB //                    printf("LEFT: %d \r",FLAME_ANALOG[6]);
; 0000 00EC //                }
; 0000 00ED //                else if(MAX_VAL==FLAME_ANALOG[0])
; 0000 00EE //                {
; 0000 00EF //                    printf("RIGHT: %d \r",FLAME_ANALOG[0]);
; 0000 00F0 //                }
; 0000 00F1 //
; 0000 00F2 //            }
; 0000 00F3 //            else
; 0000 00F4 //            {
; 0000 00F5 //                printf("NO FIRE \r");
; 0000 00F6 //            }
; 0000 00F7 
; 0000 00F8             if(MAX_VAL>=100)
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00F9             {
; 0000 00FA                 if(MAX_VAL==FLAME_ANALOG[3])
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00FB                 {
; 0000 00FC                     FLAME_SENSOR=FLAME_FRONT;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00FD                 }
; 0000 00FE                 else if(MAX_VAL==FLAME_ANALOG[4])
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00FF                 {
; 0000 0100                     FLAME_SENSOR=FLAME_ASKEW_LEFT_1;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 0101                 }
; 0000 0102                 else if(MAX_VAL==FLAME_ANALOG[2])
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0103                 {
; 0000 0104                     FLAME_SENSOR=FLAME_ASKEW_RIGHT_1;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 0105                 }
; 0000 0106                 else if(MAX_VAL==FLAME_ANALOG[5])
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0107                 {
; 0000 0108                     FLAME_SENSOR=FLAME_ASKEW_LEFT_2;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0109                 }
; 0000 010A                 else if(MAX_VAL==FLAME_ANALOG[1])
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 010B                 {
; 0000 010C                     FLAME_SENSOR=FLAME_ASKEW_RIGHT_2;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 010D                 }
; 0000 010E                 else if(MAX_VAL==FLAME_ANALOG[6])
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 010F                 {
; 0000 0110                     FLAME_SENSOR=FLAME_LEFT;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0111                 }
; 0000 0112                 else if(MAX_VAL==FLAME_ANALOG[0])
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0113                 {
; 0000 0114                     FLAME_SENSOR=FLAME_RIGHT;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 0115                 }
; 0000 0116 
; 0000 0117             }
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 0118             else
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 0119             {
; 0000 011A                 FLAME_SENSOR=NO_FLAME;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 011B             }
;PCODE: $0000010A VOL: 0
; 0000 011C 
; 0000 011D             Send_UART(COMMAND_FLAG_A);
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 011E             Send_UART(COMMAND_FLAG_B);
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 011F             Send_UART(FLAME_SENSOR);
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 0120             Send_UART(FRONT_ANALOG);
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 0121 
; 0000 0122       }
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0123 }
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;
;
;void YUME_Initialization(void)
; 0000 0127 {
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0128     // Input/Output Ports initialization
; 0000 0129     // Port B initialization
; 0000 012A     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 012B     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 012C     PORTB=0x00;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 012D     DDRB=0x00;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 012E 
; 0000 012F     // Port C initialization
; 0000 0130     // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0131     // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0132     PORTC=0x00;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 0133     DDRC=0x00;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 0134 
; 0000 0135     // Port D initialization
; 0000 0136     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0137     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0138     PORTD=0x00;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 0139     DDRD=0x00;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 013A 
; 0000 013B     // Timer/Counter 0 initialization
; 0000 013C     // Clock source: System Clock
; 0000 013D     // Clock value: Timer 0 Stopped
; 0000 013E     TCCR0=0x00;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 013F     TCNT0=0x00;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0140 
; 0000 0141     // Timer/Counter 1 initialization
; 0000 0142     // Clock source: System Clock
; 0000 0143     // Clock value: Timer1 Stopped
; 0000 0144     // Mode: Normal top=0xFFFF
; 0000 0145     // OC1A output: Discon.
; 0000 0146     // OC1B output: Discon.
; 0000 0147     // Noise Canceler: Off
; 0000 0148     // Input Capture on Falling Edge
; 0000 0149     // Timer1 Overflow Interrupt: Off
; 0000 014A     // Input Capture Interrupt: Off
; 0000 014B     // Compare A Match Interrupt: Off
; 0000 014C     // Compare B Match Interrupt: Off
; 0000 014D     TCCR1A=0x00;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 014E     TCCR1B=0x00;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 014F     TCNT1H=0x00;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 0150     TCNT1L=0x00;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 0151     ICR1H=0x00;
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 0152     ICR1L=0x00;
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 0153     OCR1AH=0x00;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 0154     OCR1AL=0x00;
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 0155     OCR1BH=0x00;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 0156     OCR1BL=0x00;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 0157 
; 0000 0158     // Timer/Counter 2 initialization
; 0000 0159     // Clock source: System Clock
; 0000 015A     // Clock value: Timer2 Stopped
; 0000 015B     // Mode: Normal top=0xFF
; 0000 015C     // OC2 output: Disconnected
; 0000 015D     ASSR=0x00;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 015E     TCCR2=0x00;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 015F     TCNT2=0x00;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 0160     OCR2=0x00;
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 0161 
; 0000 0162     // External Interrupt(s) initialization
; 0000 0163     // INT0: Off
; 0000 0164     // INT1: Off
; 0000 0165     MCUCR=0x00;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 0166 
; 0000 0167     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0168     TIMSK=0x00;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 0169 
; 0000 016A     // USART initialization
; 0000 016B     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 016C     // USART Receiver: On
; 0000 016D     // USART Transmitter: On
; 0000 016E     // USART Mode: Asynchronous
; 0000 016F     // USART Baud Rate: 9600
; 0000 0170     UCSRA=0x00;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 0171     UCSRB=0x98;
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 0172     UCSRC=0x86;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 0173     UBRRH=0x00;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 0174     UBRRL=0x67;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 0175 
; 0000 0176     // Analog Comparator initialization
; 0000 0177     // Analog Comparator: Off
; 0000 0178     // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0179     ACSR=0x80;
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 017A     SFIOR=0x00;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 017B 
; 0000 017C     // ADC initialization
; 0000 017D     // ADC Clock frequency: 1000.000 kHz
; 0000 017E     // ADC Voltage Reference: AVCC pin
; 0000 017F     // Only the 8 most significant bits of
; 0000 0180     // the AD conversion result are used
; 0000 0181     ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 0182     ADCSRA=0x84;
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 0183 
; 0000 0184     // SPI initialization
; 0000 0185     // SPI disabled
; 0000 0186     SPCR=0x00;
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 0187 
; 0000 0188     // TWI initialization
; 0000 0189     // TWI disabled
; 0000 018A     TWCR=0x00;
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 018B 
; 0000 018C     // Global enable interrupts
; 0000 018D     #asm("sei")
;PCODE: $00000162 VOL: 0
	sei
;PCODE: $00000163 VOL: 0
; 0000 018E 
; 0000 018F }
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;
;void UART_Speed_Config(int mode)
; 0000 0192 {
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 0193     //BAUD RATE SELECT INITIALIZATION
; 0000 0194     if (PINB.3==0) baud_mode=1;
;	mode -> Y+0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 0195     else if (PINB.3==1) baud_mode=2;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 0196 
; 0000 0197     switch(mode)
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 0198     {
; 0000 0199         case 1:
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 019A             {
; 0000 019B                 UBRRH=0x00;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 019C                 UBRRL=0x00;
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 019D             }break;
;PCODE: $0000017D VOL: 0
; 0000 019E         case 2:
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 019F             {
; 0000 01A0                 UBRRH=0x00;
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 01A1                 UBRRL=0x67;
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 01A2             }break;
;PCODE: $00000185 VOL: 0
; 0000 01A3 
; 0000 01A4     }
;PCODE: $00000186 VOL: 0
; 0000 01A5 
; 0000 01A6     #asm("cli")
;PCODE: $00000187 VOL: 0
	cli
;PCODE: $00000188 VOL: 0
; 0000 01A7     //if(PIND.3==0)    operational 1Mbps
; 0000 01A8      //   {
; 0000 01A9      //       UBRRH=0x00;
; 0000 01AA       //      UBRRL=0x00;
; 0000 01AB       //  }
; 0000 01AC     //else   //9600bps for debug purpose
; 0000 01AD         //{
; 0000 01AE             //UBRRH=0x00;
; 0000 01AF             //UBRRL=0x67;
; 0000 01B0         //}
; 0000 01B1     #asm("sei")
;PCODE: $00000189 VOL: 0
	sei
;PCODE: $0000018A VOL: 0
; 0000 01B2 }
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;
;void Send_UART(unsigned char data)
; 0000 01B5 {
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 01B6     while(!(UCSRA & (1<<UDRE))){};
;	data -> Y+0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 01B7     UDR=data;
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 01B8 }
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;
;//void UART_Speed_Config(int mode)
;//{
;//    //BAUD RATE SELECT INITIALIZATION
;//    if (PINB.3==0) baud_mode=1;
;//    else if (PINB.3==1) baud_mode=2;
;//
;//    switch(mode)
;//    {
;//        case 1:
;//            {
;//                UBRRH=0x00;
;//                UBRRL=0x00;
;//            }break;
;//        case 2:
;//            {
;//                UBRRH=0x00;
;//                UBRRL=0x67;
;//            }break;
;//
;//    }
;//
;//    #asm("cli")
;//    #asm("sei")
;//}
;
;
