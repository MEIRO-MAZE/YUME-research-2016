;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project  : YUME 2016 Rangefinder Controller
;Version  : Ver.1.0
;Date     : Tuesday, February 24th 2016
;Author   : Ryan
;Division : Intelligent Legged Fire Fighting Robot Division
;Company  : University of Brawijaya Robotics Team
;Comments:
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <sleep.h>
;
;// Standard Input/Output functions
;#include <stdio.h>
;#include <sleep.h>
;
;//MACRO
;#define  TIM1_OFF    TCCR1B=0x00
;#define  TIM1_ON     TCCR1B=0x0B
;#define  TIM1_RESET  TCNT1=0x0000
;#define  UDRE 5
;
;//OLD CONFIG WITHOUT SHARP INFRARED RANGER
;//#define PING_LEFT        0
;//#define PING_ASKEW_LEFT  1
;//#define PING_FRONT       2
;//#define PING_ASKEW_RIGHT 3
;//#define PING_RIGHT       4
;//#define PING_REAR        5
;//#define PING_REAR_LEFT   6
;//#define PING_REAR_RIGHT  7
;
;#define PING_LEFT        3
;#define PING_ASKEW_LEFT  4
;#define PING_FRONT       5
;#define PING_ASKEW_RIGHT 6
;#define PING_RIGHT       7
;
;//SHARP IR
;#define SHARP_FRONT     0
;#define SHARP_LEFT      1
;#define SHARP_RIGHT     2
;
;unsigned int COMMAND_FLAG_A = 0x3C;
;unsigned int COMMAND_FLAG_B = 0x3E;
;const unsigned int COMMAND_COMPLETED = 0x7C;

	.DSEG
;
;//GLOBAL VARIABLE
;char flag=0,schedule=0;
;int eksekusi;
;
;unsigned int distance[8]={0,0,0,0,0,0,0,0};
;unsigned int TEST[8]={1,2,3,4,5,6,7,8};
;//char x=0;
;int baud_mode;
;
;//UART SPEED CONFIG VARIABLES
;const int DEBUG_MODE = 2;
;const int ROBOT_MODE = 1;
;
;
;
;
;//Sharp IR Data
;unsigned int ADC_Value;
;float SHARP_Vo;
;unsigned int SHARP_DIST[8]={0,0,0,0,0,0,0,0};
;
;unsigned int SHARP_TEMP[5]={0,0,0,0,0};
;
;//FUNCTION PROTOTYPE
;void YUME_SystemInit(void);
;void UART_Speed_Config(int mode);
;void Ping_Scan(int CHANNEL);
;void Send_UART(unsigned char DATA);
;void SHARP_SCAN (unsigned int CHANNEL);
;
;// Timer1 output compare A interrupt service routine
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 0060 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0061     // Place your code here
; 0000 0062     schedule=1;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0063 }
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;
;// Timer1 output compare B interrupt service routine
;interrupt [TIM1_COMPB] void timer1_compb_isr(void)
; 0000 0067 {
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0068     // Place your code here
; 0000 0069     flag=1;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 006A 
; 0000 006B }
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;
;
;#define ADC_VREF_TYPE 0x60
;
;// Read the 8 most significant bits
;// of the AD conversion result
;unsigned char read_adc(unsigned char adc_input)
; 0000 0073 {
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0074 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0075 // Delay needed for the stabilization of the ADC input voltage
; 0000 0076 delay_us(10);
;PCODE: $00000020 VOL: 0
; 0000 0077 // Start the AD conversion
; 0000 0078 ADCSRA|=0x40;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0079 // Wait for the AD conversion to complete
; 0000 007A while ((ADCSRA & 0x10)==0);
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 007B ADCSRA|=0x10;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 007C return ADCH;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 007D }
;PCODE: $0000002E VOL: 0
;
;
;void main(void)
; 0000 0081 {
;PCODE: $0000002F VOL: 0
; 0000 0082     YUME_SystemInit();
;PCODE: $00000030 VOL: 0
; 0000 0083     TIM1_OFF;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0084     TIM1_RESET;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0085     PORTD.6=1;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0086     PORTD.7=0;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0087     UART_Speed_Config(DEBUG_MODE);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0088     delay_ms(200);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0089 
; 0000 008A     // Global enable interrupts
; 0000 008B     #asm("sei") //meaning -> asm= assembler | sei= set enable interrupt
;PCODE: $0000003F VOL: 0
	sei
;PCODE: $00000040 VOL: 0
; 0000 008C 
; 0000 008D while (1)
;PCODE: $00000041 VOL: 0
; 0000 008E       {
; 0000 008F //            SHARP_DIST[0]=read_adc(0);
; 0000 0090 //
; 0000 0091 //            SHARP_Vo= (float)SHARP_DIST[0]/51;
; 0000 0092 ////            printf("SHARP: %d \r",(int) Vo);
; 0000 0093 //
; 0000 0094 //            SHARP_DIST[1]= (float)((1/((0.0821*SHARP_Vo)-0.0042)-0.42));
; 0000 0095 //
; 0000 0096 //            printf("SHARP: %d \r",(int) SHARP_DIST[1]);
; 0000 0097 //
; 0000 0098 //            SHARP_SCAN(SHARP_FRONT);
; 0000 0099 //            printf("SHARP: %d \r",SHARP_DIST[SHARP_FRONT]);
; 0000 009A 
; 0000 009B 
; 0000 009C //            //Place your code here
; 0000 009D             Send_UART(COMMAND_FLAG_A);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 009E             Send_UART(COMMAND_FLAG_B);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 009F 
; 0000 00A0             Ping_Scan(PING_LEFT); Send_UART(distance[PING_LEFT]);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 00A1             Ping_Scan(PING_RIGHT);Send_UART(distance[PING_RIGHT]);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 00A2             Ping_Scan(PING_FRONT);Send_UART(distance[PING_FRONT]);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 00A3 
; 0000 00A4             //Ping_Scan(PING_REAR);Send_UART(distance[PING_REAR]);
; 0000 00A5             SHARP_SCAN(SHARP_FRONT); Send_UART(SHARP_DIST[SHARP_FRONT]);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 00A6 
; 0000 00A7             Ping_Scan(PING_ASKEW_LEFT);Send_UART(distance[PING_ASKEW_LEFT]);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 00A8             Ping_Scan(PING_ASKEW_RIGHT);Send_UART(distance[PING_ASKEW_RIGHT]);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 00A9 
; 0000 00AA 
; 0000 00AB             SHARP_SCAN(SHARP_LEFT); Send_UART(SHARP_DIST[SHARP_LEFT]);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00AC             SHARP_SCAN(SHARP_RIGHT); Send_UART(SHARP_DIST[SHARP_RIGHT]);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00AD 
; 0000 00AE 
; 0000 00AF 
; 0000 00B0 //            Ping_Scan(PING_REAR_LEFT);Send_UART(distance[PING_REAR_LEFT]);
; 0000 00B1 //            Ping_Scan(PING_REAR_RIGHT);Send_UART(distance[PING_REAR_RIGHT]);
; 0000 00B2 
; 0000 00B3       }
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00B4 }
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;
;void YUME_SystemInit(void)
; 0000 00B7 {
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00B8     // Input/Output Ports initialization
; 0000 00B9     // Port B initialization
; 0000 00BA     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00BB     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00BC     PORTB=0x00;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00BD     DDRB=0x00;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00BE 
; 0000 00BF     // Port C initialization
; 0000 00C0     // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00C1     // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00C2     PORTC=0x00;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00C3     DDRC=0x00;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00C4 
; 0000 00C5     // Port D initialization
; 0000 00C6     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00C7     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00C8     PORTD=0x00;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00C9     DDRD=0x00;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00CA 
; 0000 00CB     // Timer/Counter 0 initialization
; 0000 00CC     // Clock source: System Clock
; 0000 00CD     // Clock value: Timer 0 Stopped
; 0000 00CE     TCCR0=0x00;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00CF     TCNT0=0x00;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00D0 
; 0000 00D1     // Timer/Counter 1 initialization
; 0000 00D2     // Clock source: System Clock
; 0000 00D3     // Clock value: 250.000 kHz
; 0000 00D4     // Mode: CTC top=OCR1A
; 0000 00D5     // OC1A output: Discon.
; 0000 00D6     // OC1B output: Discon.
; 0000 00D7     // Noise Canceler: Off
; 0000 00D8     // Input Capture on Falling Edge
; 0000 00D9     // Timer1 Overflow Interrupt: Off
; 0000 00DA     // Input Capture Interrupt: Off
; 0000 00DB     // Compare A Match Interrupt: On
; 0000 00DC     // Compare B Match Interrupt: On
; 0000 00DD     TCCR1A=0x00;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00DE     TCCR1B=0x0B;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00DF     TCNT1H=0x00;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00E0     TCNT1L=0x00;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00E1     ICR1H=0x00;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00E2     ICR1L=0x00;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00E3     OCR1AH=0x09;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00E4     OCR1AL=0xC4;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00E5     OCR1BH=0x07;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00E6     OCR1BL=0xD0;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00E7 
; 0000 00E8     // Timer/Counter 2 initialization
; 0000 00E9     // Clock source: System Clock
; 0000 00EA     // Clock value: Timer2 Stopped
; 0000 00EB     // Mode: Normal top=0xFF
; 0000 00EC     // OC2 output: Disconnected
; 0000 00ED     ASSR=0x00;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00EE     TCCR2=0x00;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00EF     TCNT2=0x00;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00F0     OCR2=0x00;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00F1 
; 0000 00F2     // External Interrupt(s) initialization
; 0000 00F3     // INT0: Off
; 0000 00F4     // INT1: Off
; 0000 00F5     MCUCR=0x00;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00F6 
; 0000 00F7     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00F8     TIMSK=0x18;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00F9 
; 0000 00FA     // USART initialization
; 0000 00FB     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00FC     // USART Receiver: Off
; 0000 00FD     // USART Transmitter: On
; 0000 00FE     // USART Mode: Asynchronous
; 0000 00FF     // USART Baud Rate: 9600
; 0000 0100     UCSRA=0x00;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0101     UCSRB=0x08;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 0102     UCSRC=0x86;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0103     UBRRH=0x00;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 0104     UBRRL=0x67;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0105 
; 0000 0106     // Analog Comparator initialization
; 0000 0107     // Analog Comparator: Off
; 0000 0108     // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0109     ACSR=0x80;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 010A     SFIOR=0x00;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 010B 
; 0000 010C     // ADC initialization
; 0000 010D     // ADC Clock frequency: 500.000 kHz
; 0000 010E     // ADC Voltage Reference: AVCC pin
; 0000 010F     // Only the 8 most significant bits of
; 0000 0110     // the AD conversion result are used
; 0000 0111     ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0112     ADCSRA=0x85;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0113 
; 0000 0114     // SPI initialization
; 0000 0115     // SPI disabled
; 0000 0116     SPCR=0x00;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0117 
; 0000 0118     // TWI initialization
; 0000 0119     // TWI disabled
; 0000 011A     TWCR=0x00;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 011B }
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;
;void UART_Speed_Config(int mode)
; 0000 011E {
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 011F     //BAUD RATE SELECT INITIALIZATION
; 0000 0120     if (PINB.3==0) baud_mode=1;
;	mode -> Y+0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 0121     else if (PINB.3==1) baud_mode=2;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0122 
; 0000 0123     switch(mode)
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0124     {
; 0000 0125         case 1:
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0126             {
; 0000 0127                 UBRRH=0x00;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0128                 UBRRL=0x00;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0129             }break;
;PCODE: $000000E3 VOL: 0
; 0000 012A         case 2:
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 012B             {
; 0000 012C                 UBRRH=0x00;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 012D                 UBRRL=0x67;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 012E             }break;
;PCODE: $000000EB VOL: 0
; 0000 012F 
; 0000 0130     }
;PCODE: $000000EC VOL: 0
; 0000 0131 
; 0000 0132     #asm("cli")
;PCODE: $000000ED VOL: 0
	cli
;PCODE: $000000EE VOL: 0
; 0000 0133     //if(PIND.3==0)    operational 1Mbps
; 0000 0134      //   {
; 0000 0135      //       UBRRH=0x00;
; 0000 0136       //      UBRRL=0x00;
; 0000 0137       //  }
; 0000 0138     //else   //9600bps for debug purpose
; 0000 0139         //{
; 0000 013A             //UBRRH=0x00;
; 0000 013B             //UBRRL=0x67;
; 0000 013C         //}
; 0000 013D     #asm("sei")
;PCODE: $000000EF VOL: 0
	sei
;PCODE: $000000F0 VOL: 0
; 0000 013E }
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;void Ping_Scan(int CHANNEL)
; 0000 0140 {
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 0141     PORTD.6 = ~PORTD.6;
;	CHANNEL -> Y+0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 0142     PORTD.7 = ~PORTD.7;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 0143 
; 0000 0144     TIM1_OFF;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 0145     flag=0;
;PCODE: $0000010C VOL: 0
; 0000 0146     schedule=0;
;PCODE: $0000010D VOL: 0
; 0000 0147     TIM1_RESET;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0148 
; 0000 0149     PORTB&=0x00;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 014A     DDRB&=0x00;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 014B     PORTC&=0x00;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 014C     DDRC&=0x00;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 014D 
; 0000 014E     TIM1_ON;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 014F 
; 0000 0150     switch(CHANNEL)
;PCODE: $0000011E VOL: 0
; 0000 0151     {
; 0000 0152 //        case 0:
; 0000 0153 //                {
; 0000 0154 //                    DDRC.0=1;PORTC.0=1;delay_us(5);PORTC.0=0;
; 0000 0155 //                    DDRC.0=0;delay_us(4);
; 0000 0156 //
; 0000 0157 //                    while(PINC.0==1 && flag==0){};
; 0000 0158 //                    while(PINC.0==0 && flag==0){}; TIM1_ON; TIM1_RESET;
; 0000 0159 //                    while(PINC.0==1 && flag==0){}; TIM1_OFF;
; 0000 015A //
; 0000 015B //                }break;
; 0000 015C //
; 0000 015D //        case 1:
; 0000 015E //                {
; 0000 015F //                    DDRC.1=1;PORTC.1=1;delay_us(5);PORTC.1=0;
; 0000 0160 //                    DDRC.1=0;delay_us(4);
; 0000 0161 //
; 0000 0162 //                    while(PINC.1==1 && flag==0){};
; 0000 0163 //                    while(PINC.1==0 && flag==0){}; TIM1_ON; TIM1_RESET;
; 0000 0164 //                    while(PINC.1==1 && flag==0){}; TIM1_OFF;
; 0000 0165 //
; 0000 0166 //                }break;
; 0000 0167 //        case 2:
; 0000 0168 //                {
; 0000 0169 //                    DDRC.2=1;PORTC.2=1;delay_us(5);PORTC.2=0;
; 0000 016A //                    DDRC.2=0;delay_us(4);
; 0000 016B //
; 0000 016C //                    while(PINC.2==1 && flag==0){};
; 0000 016D //                    while(PINC.2==0 && flag==0){}; TIM1_ON; TIM1_RESET;
; 0000 016E //                    while(PINC.2==1 && flag==0){}; TIM1_OFF;
; 0000 016F //
; 0000 0170 //                }break;
; 0000 0171         case 3:
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 0172                 {
; 0000 0173                     DDRC.3=1;PORTC.3=1;delay_us(5);PORTC.3=0;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 0174                     DDRC.3=0;delay_us(4);
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 0175 
; 0000 0176                     while(PINC.3==1 && flag==0){};
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 0177                     while(PINC.3==0 && flag==0){}; TIM1_ON; TIM1_RESET;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 0178                     while(PINC.3==1 && flag==0){}; TIM1_OFF;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 0179 
; 0000 017A                 }break;
;PCODE: $00000159 VOL: 0
; 0000 017B         case 4:
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 017C                 {
; 0000 017D                     DDRC.4=1;PORTC.4=1;delay_us(5);PORTC.4=0;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 017E                     DDRC.4=0;delay_us(4);
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 017F 
; 0000 0180                     while(PINC.4==1 && flag==0){};
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 0181                     while(PINC.4==0 && flag==0){}; TIM1_ON; TIM1_RESET;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 0182                     while(PINC.4==1 && flag==0){}; TIM1_OFF;
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 0183 
; 0000 0184                 }break;
;PCODE: $00000195 VOL: 0
; 0000 0185         case 5:
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 0186                 {
; 0000 0187                     DDRC.5=1;PORTC.5=1;delay_us(5);PORTC.5=0;
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 0188                     DDRC.5=0;delay_us(4);
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 0189 
; 0000 018A                     while(PINC.5==1 && flag==0){};
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 018B                     while(PINC.5==0 && flag==0){}; TIM1_ON; TIM1_RESET;
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 018C                     while(PINC.5==1 && flag==0){}; TIM1_OFF;
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 018D 
; 0000 018E                 }break;
;PCODE: $000001D1 VOL: 0
; 0000 018F         case 6:
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 0190                 {
; 0000 0191                     DDRB.0=1;PORTB.0=1;delay_us(5);PORTB.0=0;
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 0192                     DDRB.0=0;delay_us(4);
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 0193 
; 0000 0194                     while(PINB.0==1 && flag==0){};
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 0195                     while(PINB.0==0 && flag==0){}; TIM1_ON; TIM1_RESET;
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0000 0196                     while(PINB.0==1 && flag==0){}; TIM1_OFF;
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 0197 
; 0000 0198                 }break;
;PCODE: $0000020D VOL: 0
; 0000 0199         case 7:
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 019A                 {
; 0000 019B                     DDRB.1=1;PORTB.1=1;delay_us(5);PORTB.1=0;
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 019C                     DDRB.1=0;delay_us(4);
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 019D 
; 0000 019E                     while(PINB.1==1 && flag==0){};
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 019F                     while(PINB.1==0 && flag==0){}; TIM1_ON; TIM1_RESET;
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 01A0                     while(PINB.1==1 && flag==0){}; TIM1_OFF;
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0000 01A1 
; 0000 01A2                 }break;
;PCODE: $00000249 VOL: 0
; 0000 01A3     }
;PCODE: $0000024A VOL: 0
; 0000 01A4 
; 0000 01A5     distance[CHANNEL]=(unsigned int)((344*0.5*100*TCNT1*64)/16000000);
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0000 01A6 
; 0000 01A7 
; 0000 01A8 
; 0000 01A9     //printf("TCNT1 Value: %d ",TCNT1);
; 0000 01AA     //Send_UART(distance[CHANNEL]);
; 0000 01AB     //printf("Ping[%d]: %d   ",CHANNEL, distance[CHANNEL]);    // \r -> return (go back to column 1 of current output line)
; 0000 01AC     TIM1_ON;
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 01AD     //if(schedule==0){idle();}
; 0000 01AE     TIM1_OFF;
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 01AF }
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;
;
;void Send_UART(unsigned char DATA)
; 0000 01B3 {
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0000 01B4     while(!(UCSRA & (1<<UDRE))){};
;	DATA -> Y+0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0000 01B5     UDR= DATA;
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0000 01B6 }
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;
;
;void SHARP_ADC_Read(void)
; 0000 01BA {
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0000 01BB     ADC_Value= read_adc(0);
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 01BC     SHARP_Vo= ADC_Value/51;
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
; 0000 01BD }
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;
;void SHARP_Calc(unsigned int CHANNEL)
; 0000 01C0 {
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0000 01C1     //SHARP_DIST[CHANNEL]= (float) ((1/((0.04*SHARP_Vo)-0;
; 0000 01C2 }
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;
;
;void SHARP_SCAN (unsigned int CHANNEL)
; 0000 01C6 {
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 01C7     int counter=0;
; 0000 01C8 
; 0000 01C9     ADC_Value=0;
;PCODE: $00000286 VOL: 0
;	CHANNEL -> Y+2
;	counter -> R16,R17
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0000 01CA     SHARP_Vo=0;
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
; 0000 01CB     SHARP_TEMP[0]=0;
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
; 0000 01CC     SHARP_TEMP[1]=0;
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0000 01CD     SHARP_TEMP[2]=0;
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0000 01CE     SHARP_TEMP[3]=0;
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 01CF     SHARP_TEMP[4]=0;
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0000 01D0 
; 0000 01D1     switch (CHANNEL)
;PCODE: $0000029F VOL: 0
; 0000 01D2     {
; 0000 01D3         case 0:
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 01D4                 {
; 0000 01D5                      for(counter=0;counter<=4;counter++)
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
; 0000 01D6                      {
; 0000 01D7                         ADC_Value = read_adc(0);
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 01D8                         SHARP_Vo  = (float)ADC_Value/51;
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 01D9                         SHARP_TEMP[counter]= (float)((1/((0.0821*SHARP_Vo)-0.0042)-0.42));
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
; 0000 01DA                      }
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 01DB 
; 0000 01DC                      SHARP_DIST[SHARP_FRONT]= (SHARP_TEMP[0]+SHARP_TEMP[1]+SHARP_TEMP[2]+SHARP_TEMP[3]+SHARP_TEMP[4])/3;
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 01DD 
; 0000 01DE //                     ADC_Value = read_adc(0);
; 0000 01DF //                     SHARP_Vo  = (float)ADC_Value/51;
; 0000 01E0 //                     SHARP_DIST[SHARP_FRONT]= (float)((1/((0.0821*SHARP_Vo)-0.0042)-0.42));
; 0000 01E1                 }break;
;PCODE: $000002E0 VOL: 0
; 0000 01E2 
; 0000 01E3         case 1:
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0000 01E4                 {
; 0000 01E5                      for(counter=0;counter<=4;counter++)
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
; 0000 01E6                      {
; 0000 01E7                         ADC_Value = read_adc(1);
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
; 0000 01E8                         SHARP_Vo  = (float)ADC_Value/51;
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
; 0000 01E9                         SHARP_TEMP[counter]= (float)((1/((0.0821*SHARP_Vo)-0.0042)-0.42));
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
; 0000 01EA                      }
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
; 0000 01EB 
; 0000 01EC                      SHARP_DIST[SHARP_LEFT]= (SHARP_TEMP[0]+SHARP_TEMP[1]+SHARP_TEMP[2]+SHARP_TEMP[3]+SHARP_TEMP[4])/3;
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
; 0000 01ED //                     ADC_Value = read_adc(1);
; 0000 01EE //                     SHARP_Vo  = (float)ADC_Value/51;
; 0000 01EF //                     SHARP_DIST[SHARP_LEFT]= (float)((1/((0.0821*SHARP_Vo)-0.0042)-0.42));
; 0000 01F0                 }break;
;PCODE: $00000323 VOL: 0
; 0000 01F1 
; 0000 01F2         case 2:
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
; 0000 01F3                 {
; 0000 01F4                      for(counter=0;counter<=4;counter++)
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
; 0000 01F5                      {
; 0000 01F6                         ADC_Value = read_adc(2);
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
; 0000 01F7                         SHARP_Vo  = (float)ADC_Value/51;
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
; 0000 01F8                         SHARP_TEMP[counter]= (float)((1/((0.0821*SHARP_Vo)-0.0042)-0.42));
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
; 0000 01F9                      }
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
; 0000 01FA 
; 0000 01FB                      SHARP_DIST[SHARP_RIGHT]= (SHARP_TEMP[0]+SHARP_TEMP[1]+SHARP_TEMP[2]+SHARP_TEMP[3]+SHARP_TEMP[4])/3;
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
; 0000 01FC 
; 0000 01FD //                     ADC_Value = read_adc(2);
; 0000 01FE //                     SHARP_Vo  = (float)ADC_Value/51;
; 0000 01FF //                     SHARP_DIST[SHARP_RIGHT]= (float)((1/((0.0821*SHARP_Vo)-0.0042)-0.42));
; 0000 0200                 }break;
;PCODE: $00000366 VOL: 0
; 0000 0201     }
;PCODE: $00000367 VOL: 0
; 0000 0202 
; 0000 0203 }
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
